/*
    Tengo Language
    Checks that all callouts inside the listing block have corresponding callouts outside the listing block 
    $ tengo MissingNumberedCallouts.tengo <asciidoc_file_to_validate>
*/

fmt := import("fmt")
os := import("os")
text := import("text")

input := os.args()
scope := os.read_file(input[2])
matches := []

//trim extra whitespace
scope = text.trim_space(scope)
//add a newline, it might be missing
scope += "\n"

codeblock_callouts := []
callouts := []
codeblock_callout_regex := ".(<\\d+>)+"
callout_regex := "^<(\\d+)>"

for line in text.split(scope, "\n") {
  //restart for new listingblock
  callouts = []
  if text.re_match(codeblock_callout_regex, line) {
    //account for lines with multiple callouts
    code_callout := text.re_find("<\\d+>", line)
    codeblock_callouts = append(codeblock_callouts, code_callout)
    //fmt.println(codeblock_callouts[0][0][0]["text"])
  }

  if text.re_match(callout_regex, line) {
    callouts := text.re_find("<\\d+>", line)
    for key, value in callouts {
      //logic: if callout is not found in codeblock_callouts, raise a match
      for item in codeblock_callouts {
        if item[0][0]["text"] != callouts[key][0]["text"] {
          start := text.index(scope, line)
          matches = append(matches, {begin: start, end: start + len(line)})
        }
      }
    }
    codeblock_callouts = []
  }
}

if len(matches) == 0 {  
  fmt.println("No missing numbered callouts")
} else {
  fmt.println(matches) 
}
