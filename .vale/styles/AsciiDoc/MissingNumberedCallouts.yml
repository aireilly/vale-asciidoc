---
extends: script
message: "Listing block callout is missing a corresponding callout."
level: warning
link: https://docs.asciidoctor.org/asciidoc/latest/verbatim/callouts/
scope: raw
script: |
  text := import("text")
  matches := []

  //trim extra whitespace
  scope = text.trim_space(scope)
  //add a newline, it might be missing
  scope += "\n"

  codeblock_callout_regex := ".+(<\\d+>)+"
  callout_regex := "^<(\\d+)>"
  codeblock_callouts := []
  callouts := []
  errors:= []
  inside := false

  num_lines := len(text.split(scope, "\n"))

  for line in text.split(scope, "\n") {
    if text.re_match(codeblock_callout_regex, line) {
      inside = true
      //account for lines with multiple callouts
      for i := 1; i < num_lines; i++ {
        //text.contains must be str, not regex
        str := "<" + i + ">"
        if text.contains(line, str) {
          codeblock_callouts = append(codeblock_callouts, i)
        }
      }
    }

    if text.re_match(callout_regex, line) {
      inside = false
      for i := 1; i < len(codeblock_callouts); i++ {
        str := "<" + i + ">"
        //if a match is not found, raise an error
        if !text.contains(line, str) {
          if len(matches) > 0 {
            //remove the most recently added match
            matches = matches[:len(matches)-1]
          }
          start := text.index(scope, line)
          matches = append(matches, {begin: start, end: start + len(line)})
        }
      }
    }
  }

  if len(codeblock_callouts) > 0 && inside == false {
    codeblock_callouts = []
  }
